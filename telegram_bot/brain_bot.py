import logging
import os
import random
import sys
from logging.handlers import RotatingFileHandler
from typing import Union

import psycopg2
# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–µ –≤ —Å–æ—Å—Ç–∞–≤–µ docker compose
# from dotenv import load_dotenv
from telegram import Chat, ParseMode, ReplyKeyboardMarkup, Update
from telegram.ext import (CallbackContext, CommandHandler, Filters,
                          MessageHandler, Updater)

logging.basicConfig(
    level=logging.WARNING,
    filename='main_log.log',
    format='%(asctime)s, %(levelname)s, %(message)s, %(name)s'
)

logger = logging.getLogger(__name__)
logger.setLevel(logging.WARNING)
handler = RotatingFileHandler('bot_log.log', maxBytes=50000000, backupCount=5)
logger.addHandler(handler)

CORRESPONDANCE: dict = {
    '–ß—Ç–æ-–ì–¥–µ-–ö–æ–≥–¥–∞': '–ß',
    '–ë—Ä–µ–π–Ω-—Ä–∏–Ω–≥': '–ë',
    '–°–≤–æ—è –∏–≥—Ä–∞': '–Ø',
}
ANSWER_TEXT: Union[None, str] = None
CURRENT_QUESTION_TYPE: Union[None, str] = '–ß'

MAX_SET: dict = {
    '–ß': 287864,
    '–ë': 37367,
    '–Ø': 5642
}

BASE_DIR: str = os.path.dirname(os.path.abspath(__file__))
DB_PATH: str = os.path.join(BASE_DIR, 'db_main.sqlite')


def get_question(question_type: str) -> Union[None, dict]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–≥–æ."""
    try:
        with psycopg2.connect(
            dbname=os.getenv('POSTGRES_DB_NAME'),
            user=os.getenv('POSTGRES_USER'),
            password=os.getenv('POSTGRES_PASSWORD'),
            host=os.getenv('DB_HOST'),
        ) as conn:
            start_point = random.randint(0, MAX_SET[question_type] - 1)
            curs = conn.cursor()
            curs.execute(
                """SELECT question,
                          answer,
                          pass_criteria,
                          comments,
                          authors,
                          sources
                    FROM questions_questions
                    WHERE (NOT condemned AND question_type = (%s))
                    LIMIT 1
                    OFFSET (%s);""",
                (question_type, start_point)
            )
            question = curs.fetchone()
    except Exception as error:
        logging.error(error, exc_info=True)
        return None
    if not question:
        logging.error(
            '–ò–∑ –±–¥ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–π –∫–∞–∫ None',
            exc_info=True
        )
        return None
    if question[0] == 'None' or question[1] == 'None':
        return None
    parsed_question = {'–í–æ–ø—Ä–æ—Å': question[0], '–û—Ç–≤–µ—Ç': question[1]}
    if question[2] != 'None':
        parsed_question['–ó–∞—á—ë—Ç'] = question[2]
    if question[3] != 'None':
        parsed_question['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = question[3]
    if question[4] != 'None':
        parsed_question['–ê–≤—Ç–æ—Ä—ã'] = question[4]
    if question[5] != 'None':
        parsed_question['–ò—Å—Ç–æ—á–Ω–∏–∫–∏'] = question[5]
    return parsed_question


def check_tokens() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    return bool(TELEGRAM_TOKEN)


def wake_up(update: Update, context: CallbackContext) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."""
    chat = update.effective_chat
    name = update.message.chat.first_name
    buttons = button_shortcut([
        ['–ß—Ç–æ-–ì–¥–µ-–ö–æ–≥–¥–∞'], ['–ë—Ä–µ–π–Ω-—Ä–∏–Ω–≥'], ['–°–≤–æ—è –∏–≥—Ä–∞'], ['–ù–∞ –≥–ª–∞–≤–Ω—É—é'],
    ],)
    text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:'
    send_message(context, chat, text, buttons)


def handle_bd_error(context: CallbackContext, chat: Chat) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API."""
    buttons = button_shortcut([['–ù–∞ –≥–ª–∞–≤–Ω—É—é'],])
    text = ('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üò≥\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ')
    send_message(context, chat, text, buttons)


def button_shortcut(button_names: list[list]) -> ReplyKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏.
    """
    return ReplyKeyboardMarkup(
        keyboard=button_names,
        resize_keyboard=True
    )


def generate_answer(parsed_question: dict) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    """
    answer_dict = parsed_question.copy()
    del answer_dict['–í–æ–ø—Ä–æ—Å']
    answer = answer_dict['–û—Ç–≤–µ—Ç']
    ANSWER_TEXT = f'<b>{answer}</b>\n\n'
    del answer_dict['–û—Ç–≤–µ—Ç']
    ANSWER_TEXT += '\n'.join(f'<b><i>{key}:</i></b> <i>{item}</i>'
                             for key, item in answer_dict.items())
    return ANSWER_TEXT


def send_message(context: CallbackContext,
                 chat: Chat,
                 text: str,
                 buttons: ReplyKeyboardMarkup,
                 parse_mode=None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    return context.bot.send_message(
        chat_id=chat.id,
        text=text,
        reply_markup=buttons,
        disable_web_page_preview=True,
        parse_mode=parse_mode
    )


def handle_messages(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    global ANSWER_TEXT, CURRENT_QUESTION_TYPE
    chat = update.effective_chat
    message = update.message.text
    if message in ('–ß—Ç–æ-–ì–¥–µ-–ö–æ–≥–¥–∞', '–ë—Ä–µ–π–Ω-—Ä–∏–Ω–≥',
                   '–°–≤–æ—è –∏–≥—Ä–∞', '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'):
        if message == '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å' and not CURRENT_QUESTION_TYPE:
            buttons = button_shortcut([['–ù–∞ –≥–ª–∞–≤–Ω—É—é'],])
            text = '–ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ - –Ω–µ –±—É–¥–µ—Ç –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ'
            send_message(context, chat, text, buttons)
        else:
            parsed_question = (
                get_question(CURRENT_QUESTION_TYPE)
                if CURRENT_QUESTION_TYPE
                else get_question(CORRESPONDANCE[message])
            )
            if not parsed_question:
                handle_bd_error(context, chat)
            else:
                if message != '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å':
                    CURRENT_QUESTION_TYPE = CORRESPONDANCE[message]
                ANSWER_TEXT = generate_answer(parsed_question)
                buttons = button_shortcut([['–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç'], ['–ù–∞ –≥–ª–∞–≤–Ω—É—é'],])
                question = parsed_question['–í–æ–ø—Ä–æ—Å']
                text = f'<i>–í–Ω–∏–º–∞–Ω–∏–µ, –≤–æ–ø—Ä–æ—Å!</i>\n\n{question}'
                send_message(context, chat, text,
                             buttons, parse_mode=ParseMode.HTML)
    elif message == '–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç':
        buttons = button_shortcut([['–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'], ['–ù–∞ –≥–ª–∞–≤–Ω—É—é'],])
        if ANSWER_TEXT:
            send_message(context, chat, ANSWER_TEXT,
                         buttons, parse_mode=ParseMode.HTML)
            ANSWER_TEXT = None
        else:
            buttons = button_shortcut([['–ù–∞ –≥–ª–∞–≤–Ω—É—é'],])
            text = '–°–ø–µ—Ä–≤–∞ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç'
            send_message(context, chat, text, buttons)
    elif message == '–ù–∞ –≥–ª–∞–≤–Ω—É—é':
        CURRENT_QUESTION_TYPE = None
        ANSWER_TEXT = None
        wake_up(update, context)
    else:
        buttons = button_shortcut([['–ù–∞ –≥–ª–∞–≤–Ω—É—é'],])
        text = ('–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ, '
                '–∞ –ª—É—á—à–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏')
        send_message(context, chat, text, buttons)


if __name__ == '__main__':
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–µ –≤ —Å–æ—Å—Ç–∞–≤–µ docker compose
    # load_dotenv()
    TELEGRAM_TOKEN: str = os.getenv('TEST_TELEGRAM_TOKEN')
    if not check_tokens():
        error_message = ('–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:'
                         ' –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
        logging.critical(error_message)
        sys.exit(error_message)
    updater = Updater(token=TELEGRAM_TOKEN)
    updater.dispatcher.add_handler(
        CommandHandler(('start',), wake_up)
    )
    updater.dispatcher.add_handler(
        MessageHandler(Filters.text, handle_messages)
    )
    updater.start_polling()
    updater.idle()
